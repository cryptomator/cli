name: Java app image Linux

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      sem-version:
        description: 'Version'
        required: true

permissions:
  contents: write

env:
  JAVA_DIST: 'zulu'
  JAVA_VERSION: '22.0.2+9'

defaults:
  run:
    shell: bash

jobs:
  prepare:
    name: Determines the versions strings for the binaries
    runs-on: [ubuntu-latest]
    outputs:
      semVerStr: ${{ steps.determine-version.outputs.version }}
      semVerNum: ${{steps.determine-number.outputs.number}}
    steps:
      - id: determine-version
        shell: pwsh
        run: |
          if ( '${{github.event_name}}' -eq 'release') {
            echo 'version=${{ github.event.release.tag_name}}' >> "$env:GITHUB_OUTPUT"
            exit 0
          } elseif ('${{inputs.sem-version}}') {
            echo 'version=${{ inputs.sem-version}}' >> "$env:GITHUB_OUTPUT"
            exit 0
          }
          Write-Error "Version neither via input nor by tag specified. Aborting"
          exit 1
      - id: determine-number
        run: |
          SEM_VER_NUM=$(echo "${{ steps.determine-version.outputs.version }}" | sed -E 's/([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "number=${SEM_VER_NUM}" >> "$GITHUB_OUTPUT"

  build-binary:
    name: Build java app image
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            architecture: x64
            native-access-lib: 'org.cryptomator.jfuse.linux.amd64'
            artifact-name: cryptomator-cli-${{ needs.prepare.outputs.semVerStr }}-linux-x64.zip
          - os: [self-hosted, Linux, ARM64]
            architecture: aarch64
            native-access-lib: 'org.cryptomator.jfuse.linux.aarch64'
            artifact-name: cryptomator-cli-${{ needs.prepare.outputs.semVerStr }}-linux-aarch64.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}
      - name: Set version
        run: mvn versions:set -DnewVersion=${{ needs.prepare.outputs.semVerStr }}
      - name: Run maven
        run: mvn -B clean package -DskipTests
      - name: Patch target dir
        run: |
          cp target/cryptomator-*.jar target/mods
      - name: Run jlink
        run: |
          envsubst < dist/jlink.args > target/jlink.args
          "${JAVA_HOME}/bin/jlink" '@./target/jlink.args'
      - name: Run jpackage
        run: |
          envsubst < dist/jpackage.args > target/jpackage.args
          "${JAVA_HOME}/bin/jpackage" '@./target/jpackage.args'
        env:
          JP_APP_VERSION: ${{ needs.prepare.outputs.semVerNum }}
          APP_VERSION: ${{ needs.prepare.outputs.semVerStr }}
          NATIVE_ACCESS_PACKAGE: ${{ matrix.native-access-lib }}
      - name: Update app dir
        run: |
          cp LICENSE.txt target/cryptomator-cli
          cp target/cryptomator-cli_completion.sh target/cryptomator-cli
      - uses: actions/upload-artifact@v4
        with:
          name: cryptomator-cli-linux-${{ matrix.architecture }}
          path: ./target/cryptomator-cli
          if-no-files-found: error
      - name: Zip binary for release
        run: zip -r ./${{ matrix.artifact-name}} ./target/cryptomator-cli
      - name: Create detached GPG signature with key 615D449FE6E6A235
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --quiet --import
          echo "${GPG_PASSPHRASE}" | gpg --batch --quiet --passphrase-fd 0 --pinentry-mode loopback -u 615D449FE6E6A235 --detach-sign -a ./${{ matrix.artifact-name }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.RELEASES_GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.RELEASES_GPG_PASSPHRASE }}
      - name: Publish artefact on GitHub Releases
        if: startsWith(github.ref, 'refs/tags/') && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          token: ${{ secrets.CRYPTOBOT_RELEASE_TOKEN }}
          files: |
            ${{ matrix.artifact-name }}
            cryptomator-cli-*.asc

